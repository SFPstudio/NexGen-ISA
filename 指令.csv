类别,助记符,操作码,操作数,编码格式,功能描述,使用方法
--------核心指令集--------
标量,add,0x0010,"rd, rs1, rs2",R-Type,整数加法,"rd = rs1 + rs2（32/64 位）"
标量,sub,0x0011,"rd, rs1, rs2",R-Type,整数减法,"rd = rs1 - rs2"
标量,mul,0x0012,"rd, rs1, rs2",R-Type,整数乘法,"rd = rs1 * rs2（低 64 位）"
标量,div,0x0013,"rd, rs1, rs2",R-Type,整数除法,"rd = rs1 / rs2（带符号）"
标量,and,0x0020,"rd, rs1, rs2",R-Type,逻辑与,"rd = rs1 & rs2"
标量,or,0x0021,"rd, rs1, rs2",R-Type,逻辑或,"rd = rs1 | rs2"
标量,xor,0x0022,"rd, rs1, rs2",R-Type,逻辑异或,"rd = rs1 ^ rs2"
标量,sll,0x0030,"rd, rs1, rs2",R-Type,逻辑左移,"rd = rs1 << rs2"
标量,srl,0x0031,"rd, rs1, rs2",R-Type,逻辑右移,"rd = rs1 >> rs2（无符号）"
标量,sra,0x0032,"rd, rs1, rs2",R-Type,算术右移,"rd = rs1 >> rs2（带符号）"
标量,fadd.s,0x0100,"rd, rs1, rs2",R-Type,单精度浮点加法,"rd = rs1 + rs2（IEEE 754）"
标量,fsub.s,0x0101,"rd, rs1, rs2",R-Type,单精度浮点减法,"rd = rs1 - rs2"
标量,fmul.s,0x0102,"rd, rs1, rs2",R-Type,单精度浮点乘法,"rd = rs1 * rs2"
标量,fdiv.s,0x0103,"rd, rs1, rs2",R-Type,单精度浮点除法,"rd = rs1 / rs2"
标量,fadd.d,0x0110,"rd, rs1, rs2",R-Type,双精度浮点加法,"rd = rs1 + rs2（64 位）"
标量,fcvt.s.d,0x0120,"rd, rs1",R-Type,浮点转换,"单精度转双精度"
标量,feq.s,0x0130,"rd, rs1, rs2",R-Type,浮点比较,"rd = (rs1 == rs2) ? 1 : 0"
标量,fclass.s,0x0140,"rd, rs1",R-Type,浮点分类,"rd = 浮点分类结果（NaN、零、无穷等）"
标量,fsflags,0x0141,"rd, rs1",R-Type,读取浮点异常标志,"rd = fflags"
标量,fsrm,0x0142,"rd, rs1",R-Type,读取浮点舍入模式,"rd = frm"
标量,fscsr,0x0143,"rd, rs1",R-Type,读取浮点控制状态寄存器,"rd = fcsr"

--------内存管理指令--------
内存,load.b,0x1000,"rd, (rs1)",I-Type,字节加载,"从地址 rs1 加载 8 位数据到 rd（零扩展）"
内存,load.h,0x1001,"rd, (rs1)",I-Type,半字加载,"从地址 rs1 加载 16 位数据到 rd"
内存,load.w,0x1002,"rd, (rs1)",I-Type,字加载,"从地址 rs1 加载 32 位数据到 rd"
内存,load.d,0x1003,"rd, (rs1)",I-Type,双字加载,"从地址 rs1 加载 64 位数据到 rd"
内存,store.b,0x1010,"rs2, (rs1)",S-Type,字节存储,"将 rs2 的低 8 位存储到地址 rs1"
内存,store.h,0x1011,"rs2, (rs1)",S-Type,半字存储,"将 rs2 的低 16 位存储到地址 rs1"
内存,store.w,0x1012,"rs2, (rs1)",S-Type,字存储,"将 rs2 的低 32 位存储到地址 rs1"
内存,store.d,0x1013,"rs2, (rs1)",S-Type,双字存储,"将 rs2 的 64 位存储到地址 rs1"
内存,fence,0x1020,"-",I-Type,内存屏障,"保证内存操作顺序一致性"
内存,sfence.vma,0x1021,"rs1, rs2",R-Type,虚拟内存屏障,"刷新 TLB，rs1 为地址，rs2 为 ASID"

--------特权指令（支持操作系统）--------
特权,ecall,0x0000,"-",I-Type,环境调用,"触发内核态系统调用"
特权,ebreak,0x0001,"-",I-Type,调试断点,"进入调试模式"
特权,mret,0x1000000,"-",I-Type,异常返回,"从异常处理返回用户态"
特权,sret,0x1000001,"-",I-Type,监管返回,"从监管模式返回"
特权,wfi,0x1000002,"-",I-Type,等待中断,"暂停直至中断发生"
特权,csrrw,0x2000,"rd, csr, rs1",I-Type,读写 CSR,"原子化读写控制状态寄存器"
特权,csrrs,0x2001,"rd, csr, rs1",I-Type,置位 CSR,"rd = csr; csr |= rs1"
特权,csrrc,0x2002,"rd, csr, rs1",I-Type,清零 CSR,"rd = csr; csr &= ~rs1"

--------原子操作指令（多核支持）--------
原子,amoadd.w,0x3000,"rd, rs1, rs2",R-Type,原子加字,"rd = [rs1]; [rs1] += rs2"
原子,amoswap.w,0x3001,"rd, rs1, rs2",R-Type,原子交换字,"rd = [rs1]; [rs1] = rs2"
原子,amoxor.w,0x3002,"rd, rs1, rs2",R-Type,原子异或字,"rd = [rs1]; [rs1] ^= rs2"
原子,amoadd.d,0x3003,"rd, rs1, rs2",R-Type,原子加双字,"64 位原子加法"

--------中断与异常处理--------
中断,int.enable,0x4000,"imm",I-Type,全局中断使能,"imm=0 禁用，imm=1 启用"
中断,int.vector,0x4001,"rd, imm",I-Type,中断向量设置,"设置中断处理程序地址"
中断,int.priority,0x4002,"rd, imm",I-Type,中断优先级设置,"设置中断优先级（0-15）"
异常,trap.vec,0x4010,"rd, imm",I-Type,异常向量表,"设置异常处理基地址"
异常,trap.priority,0x4011,"rd, imm",I-Type,异常优先级设置,"设置异常优先级（0-15）"

--------虚拟内存管理（MMU）--------
mmu,sfence.vma,0x5000,"rs1, rs2",R-Type,TLB 刷新,"rs1=地址，rs2=ASID"
mmu,page.walk,0x5001,"rd, rs1",R-Type,页表遍历,"rd = 物理地址，rs1=虚拟地址"
mmu,satp,0x5002,"rd, rs1",R-Type,页表基址,"设置 SATP 寄存器"

--------I/O 与设备交互--------
io,in.b,0x6000,"rd, (rs1)",I-Type,输入字节,"从 I/O 端口 rs1 读取 8 位到 rd"
io,out.w,0x6001,"rs1, (rs2)",S-Type,输出字,"向 I/O 端口 rs2 写入 rs1 的 32 位"
io,dev.config,0x6002,"rs1, rs2",R-Type,设备配置,"配置设备寄存器"
io,pci.read,0x6003,"rd, rs1",I-Type,PCI 读取,"从 PCI 配置空间读取数据"
io,pci.write,0x6004,"rs1, rs2",S-Type,PCI 写入,"向 PCI 配置空间写入数据"
io,dma.start,0x6005,"rs1, rs2",R-Type,DMA 启动,"启动 DMA 传输，rs1=源地址，rs2=目标地址"
io,dma.status,0x6006,"rd, rs1",I-Type,DMA 状态,"读取 DMA 传输状态"

--------设备驱动指令--------
驱动,uart.send,0x7000,"rs1",I-Type,UART 发送,"向 UART 发送一个字节"
驱动,uart.recv,0x7001,"rd",I-Type,UART 接收,"从 UART 接收一个字节"
驱动,spi.transfer,0x7002,"rd, rs1",R-Type,SPI 传输,"通过 SPI 发送和接收数据"
驱动,i2c.read,0x7003,"rd, rs1",I-Type,I2C 读取,"从 I2C 设备读取数据"
驱动,i2c.write,0x7004,"rs1, rs2",S-Type,I2C 写入,"向 I2C 设备写入数据"
驱动,gpu.draw,0x7005,"rs1, rs2",R-Type,GPU 绘图,"向 GPU 发送绘图命令"
驱动,audio.play,0x7006,"rs1, rs2",R-Type,音频播放,"向音频设备发送数据"

--------CSR 定义--------
csr,mstatus,0x300,读写,机器状态寄存器,"控制全局中断和特权模式"
csr,mie,0x304,读写,机器中断使能,"控制中断使能"
csr,mip,0x344,读写,机器中断挂起,"读取中断挂起状态"
csr,mtvec,0x305,读写,机器陷阱向量,"设置异常处理程序地址"
csr,mepc,0x341,读写,机器异常 PC,"保存异常发生时的 PC"
csr,mcause,0x342,只读,机器异常原因,"读取异常原因"
csr,mtval,0x343,只读,机器陷阱值,"读取异常附加信息"
csr,mhartid,0xF14,只读,硬件线程 ID,"读取当前核心 ID"
csr,mtime,0x701,只读,机器时间,"读取当前时间"
csr,mtimecmp,0x704,读写,机器时间比较,"设置定时器中断"
csr,fflags,0x001,读写,浮点异常标志,"浮点异常标志（无效操作、除零、溢出等）"
csr,frm,0x002,读写,浮点舍入模式,"浮点舍入模式"
csr,fcsr,0x003,读写,浮点控制状态寄存器,"fflags + frm"
csr,mpriority,0x346,读写,机器中断优先级,"设置中断优先级（0-15）"
csr,sipriority,0x146,读写,监管中断优先级,"设置监管中断优先级"
csr,uipriority,0x046,读写,用户中断优先级,"设置用户中断优先级"
